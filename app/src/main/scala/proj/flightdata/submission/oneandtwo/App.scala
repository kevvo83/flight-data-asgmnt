/*
 * This source file was generated by the Gradle 'init' task
 */
package proj.flightdata.submission.oneandtwo

import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.{DateType, IntegerType, StringType, StructType}
import org.apache.spark.sql.{SaveMode, SparkSession}


object App extends App {

  val spark = SparkSession
    .builder().master("local")
    .appName("flight-data-assignment-oneandtwo")
    .config("spark.eventLog.enabled", value = true)
    .config("spark.eventLog.dir", "/Users/kevinlawrence/Downloads/spark-history-server/eventLogs/")
    .getOrCreate()

  val debug: Boolean = false

  val passengersDf = spark.
    read.
    option("header", "true").
    schema(
      new StructType().
        add("passengerId", IntegerType).
        add("firstName", StringType).
        add("lastName", StringType)
    ).
    csv("src/main/resources/passengers.csv")

  val flightDataDf = spark.
    read.
    option("header", "true").
    schema(
      new StructType().
        add("passengerId", IntegerType).
        add("flightId", IntegerType).
        add("from", StringType).
        add("to", StringType).
        add("date", DateType)
    ).
    csv("src/main/resources/flightData.csv").
    withColumn("monthOfYear", month(col("date")))

  if (debug) {
    passengersDf.printSchema()
    println(passengersDf.columns.mkString)
    passengersDf.head(10).foreach(println(_))
    flightDataDf.printSchema()
    flightDataDf.head(10).foreach(println(_))
  }

  // question 1
  flightDataDf.
    groupBy(col("monthOfYear")).
    agg(countDistinct(col("flightId")).alias("number_of_flights")).
    orderBy(asc("monthOfYear")).
    repartition(1).
    write.option("header", "true").
    mode(SaveMode.Overwrite).
    format("csv").save("../answer1.csv")

  /* val denormalizedDf = flightDataDf.join(
    broadcast(passengersDf),
    flightDataDf("passengerId") === passengersDf("passengerId"),
    "left_outer"
  )*/

  // question 2
  flightDataDf.
    groupBy(col("passengerId")).
    agg(countDistinct(col("flightId")).alias("number_of_flights")).
    orderBy(desc("number_of_flights"), asc("passengerId")).
    join(
      passengersDf,
      flightDataDf("passengerId") === passengersDf("passengerId"),
      "left"
    ).
    select(flightDataDf("passengerId"), col("number_of_flights"), col("firstName"), col("lastName")).
    repartition(1).
    write.option("header", "true").
    mode(SaveMode.Overwrite).
    format("csv").save("../answer2.csv")

}
